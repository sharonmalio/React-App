{"version":3,"sources":["images.jpeg","redux/actions.js","redux/reducer.js","lib/services.js","redux/saga.js","redux/main.js","App.js","pages/Expectancy.js","Router.js","serviceWorker.js","index.js"],"names":["module","exports","FETCH_DATA_INIT","FETCH_DATA_SUCCESS","FETCH_DATA_FAILURE","fetchDataSuccess","payload","type","fetchDataFailure","initialState","data","request","axios","create","baseURL","transformResponse","JSON","parse","ApiService","fetchData","requestParams","get","params","then","response","watchSaga","call","Api","put","takeEvery","sagaMiddleware","createSagaMiddleware","store","createStore","state","applyMiddleware","run","mySaga","App","className","src","logo","alt","to","Expectancy","id","border","this","props","map","item","index","key","region","GHO","year","sex","number_of_years","queryString","location","search","Component","connect","dispatch","AppRouter","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,qC,+MCA9BC,EAAgB,kBAChBC,EAAqB,qBACrBC,EAAqB,qBAS3B,SAASC,EAAiBC,GAC7B,MAAO,CACHC,KAAMJ,EACNG,WAID,SAASE,EAAiBF,GAC7B,MAAO,CACHC,KAAMH,EACNE,WCnBR,IAAMG,EAAe,CACjBC,KAAK,I,iCCDHC,E,OAAUC,EAAMC,OAAO,CACzBC,QAAS,8CACTC,kBAAmB,CACf,SAASL,GACP,OAAOM,KAAKC,MAAMP,OAebQ,EAVI,CACfC,UAAW,SAACC,GAKT,OAJaT,EAAQU,IAAI,wBAAyB,CAC9CC,OAAQF,IACTG,MAAK,SAAAC,GAAQ,OAAIA,EAASd,U,WCL1BS,G,WAWAM,GAXV,SAAUN,EAAUb,GAApB,uEAE0B,OAF1B,kBAEgCoB,YAAKC,EAAIR,UAAWb,EAAQA,SAF5D,OAGQ,OADMkB,EAFd,gBAGcI,YAAIvB,EAAiBmB,IAHnC,8BAMO,OANP,mCAMaI,YAAIpB,KANjB,qDAWA,SAAUiB,IAAV,iEACI,OADJ,SACUI,YAAU3B,EAAiBiB,GADrC,uCAIeM,QClBTK,EAAiBC,cAEVC,EAAQC,aHHN,WAA8C,IAA7CC,EAA4C,uDAApCzB,EAAoC,yCAApBF,EAAoB,EAApBA,KAAMD,EAAc,EAAdA,QAC1C,OAAQC,GAER,KAAKJ,EACD,OAAO,eACA+B,EADP,CAEIxB,KAAMJ,IAGd,KAAKF,EACD,OAAO,eACA8B,EADP,CAEIxB,KAAM,KAKd,QACI,OAAOwB,KGbbC,YAAgBL,IAIlBA,EAAeM,IAAIC,G,2CCGJC,MAZf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,uBAAGH,UAAU,OAAb,8CACA,kBAAC,IAAD,CAAMI,GAAG,oBAAT,6B,yDCJFC,G,uLAEE,OAEI,yBAAKL,UAAU,eACX,yBAAKA,UAAU,UACf,6EACA,2BAAOM,GAAK,OAAOC,OAAO,KACtB,+BACI,4BACI,sCACA,mCACA,oCACA,mCACA,iDAGR,+BACKC,KAAKC,MAAMtC,KAAKuC,KAAI,SAACC,EAAMC,GAAP,OACjB,wBAAIC,IAAKD,GACJ,4BAAKD,EAAKG,QACX,4BAAKH,EAAKI,KACV,4BAAKJ,EAAKK,MACV,4BAAKL,EAAKM,KACV,4BAAKN,EAAKO,2B,0CAWlC,IAAMnC,EAASoC,IAAYzC,MAAM8B,KAAKC,MAAMW,SAASC,QACrDb,KAAKC,MAAM7B,UAAUG,O,GApCJuC,cA0DVC,eAlBS,SAAA5B,GACpB,MAAO,CACLxB,KAAMwB,EAAMxB,SAIW,SAAAqD,GACzB,MAAO,CACL5C,UAAW,SAAAT,GAAI,OAAIqD,ENnDd,CACHxD,KAAML,EACNI,QMiDwCI,QAUjCoD,CAA6ClB,GC/C7CoB,EATG,kBACd,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW7B,IACjC,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,mBAAmBC,UAAWvB,O,MCFxCwB,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MACvB,2DCPNC,IAASC,OACL,kBAAC,IAAD,CAAUzC,MAAOA,GACb,kBAAC,EAAD,OACS0C,SAASC,eAAe,SDqHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,MAAK,SAAAwD,GACjCA,EAAaC,kB","file":"static/js/main.4535396b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/images.9b0e4bb3.jpeg\";","export const FETCH_DATA_INIT='FETCH_DATA_INIT'\nexport const FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS'\nexport const FETCH_DATA_FAILURE = 'FETCH_DATA_FAILURE'\n\nexport function fetchDataInit(payload) {\n    return {\n        type: FETCH_DATA_INIT,\n        payload\n    }\n}\n\nexport function fetchDataSuccess(payload) {\n    return {\n        type: FETCH_DATA_SUCCESS,\n        payload\n    }\n}\n\nexport function fetchDataFailure(payload) {\n    return {\n        type: FETCH_DATA_FAILURE,\n        payload\n    }\n}","import { FETCH_DATA_SUCCESS, FETCH_DATA_FAILURE } from './actions'\n\nconst initialState = {\n    data:[]\n}\n\nexport default (state = initialState, { type, payload }) => {\n    switch (type) {\n\n    case FETCH_DATA_SUCCESS:\n        return {\n            ...state,\n            data: payload\n        }\n\n    case FETCH_DATA_FAILURE:\n        return {\n            ...state,\n            data: []\n        }\n    \n    \n\n    default:\n        return state\n    }\n}\n","import axios from \"axios\"\n\nconst request = axios.create({\n    baseURL: 'https://lifehealthyexpectancy.herokuapp.com',\n    transformResponse: [\n        function(data) {\n          return JSON.parse(data);\n        }\n      ]\n})\n\nconst ApiService = {\n    fetchData: (requestParams) => {\n       const data = request.get('/life-expectancy-data', {\n           params: requestParams\n       }).then(response => response.data)\n\n       return data \n    }\n}\n\nexport default ApiService","import { call, put, takeEvery} from 'redux-saga/effects'\n\nimport {  \n    FETCH_DATA_INIT,\n    fetchDataSuccess,\n    fetchDataFailure\n    } from './actions'\n\nimport Api from '../lib/services'\n\nfunction* fetchData(payload) {\n    try {\n        const response =  yield call(Api.fetchData, payload.payload)\n        yield put(fetchDataSuccess(response))\n        \n    } catch (error) {\n       yield put(fetchDataFailure())\n    }\n    \n}\n\nfunction* watchSaga() {\n    yield takeEvery(FETCH_DATA_INIT, fetchData)\n  }\n\nexport default watchSaga","import { createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\n\nimport reducer from './reducer'\nimport mySaga from './saga'\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware()\n// mount it on the Store\nexport const store = createStore(\n  reducer,\n  applyMiddleware(sagaMiddleware)\n)\n\n// then run the saga\nsagaMiddleware.run(mySaga)\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport logo from './images.jpeg';\nimport './App.css';\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p className=\"tag\">Welcome to WHO to WFP Life Expectancy data</p>\n        <Link to=\"/life-expectancy\"> Life Expectancy data </Link>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport  queryString from 'query-string'\nimport { fetchDataInit } from '../redux/actions'\n// import Pagination from './pagination'\n\nimport './Expectancy.css'\n\nclass Expectancy extends Component {\n    render() {\n        return (\n    \n            <div className=\"tableLayout\">\n                <div className=\"header\">\n                <h1>Life Expectancy Data at birth and at 60 years</h1>\n                <table id = \"expe\" border=\"1\">\n                    <thead>\n                        <tr>\n                            <th>Region</th>\n                            <th>GHO</th>\n                            <th>year</th>\n                            <th>sex</th>\n                            <th>Number_of_years</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.data.map((item, index) =>\n                            <tr key={index}>\n                                 <td>{item.region}</td>\n                                <td>{item.GHO}</td>\n                                <td>{item.year}</td>\n                                <td>{item.sex}</td>\n                                <td>{item.number_of_years}</td>\n                            </tr>\n                            )}\n                    </tbody>\n                </table>\n                </div>\n            </div>\n        )\n    }\n\n    componentDidMount(){\n        const params = queryString.parse(this.props.location.search);\n        this.props.fetchData(params)\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n      data: state.data\n    }\n  }\n  \n  const mapDispatchToProps = dispatch => {\n    return {\n      fetchData: data => dispatch(fetchDataInit(data))\n    }\n  }\n \n//   renderTableHeader();{\n//     let header = Object.keys(this.state.students[0])\n//     return header.map((key, index) => {\n//        return <th key={index}>{key.toUpperCase()}</th>\n//     })\n//  }\nexport default connect(mapStateToProps, mapDispatchToProps)(Expectancy);\n\n\n","import React from \"react\";\nimport {\nBrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport App from \"./App\";\nimport Expectancy from './pages/Expectancy'\n\nconst AppRouter = () => (\n    <Router>\n        <Switch>\n            <Route exact path=\"/\" component={App}/>\n            <Route exact path=\"/life-expectancy\" component={Expectancy} />\n        </Switch>\n    </Router>\n)\n\nexport default AppRouter","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './redux/main'\nimport AppRouter from './Router';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppRouter />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}